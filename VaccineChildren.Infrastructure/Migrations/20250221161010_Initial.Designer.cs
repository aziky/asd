// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VaccineChildren.Infrastructure;

#nullable disable

namespace VaccineChildren.Infrastructure.Migrations
{
    [DbContext(typeof(VaccineSystemDbContext))]
    [Migration("20250221161010_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderPackage", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.HasKey("OrderId", "PackageId")
                        .HasName("order_package_pkey");

                    b.HasIndex("PackageId");

                    b.ToTable("order_package", (string)null);
                });

            modelBuilder.Entity("OrderVaccine", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_id");

                    b.HasKey("OrderId", "VaccineId")
                        .HasName("order_vaccine_pkey");

                    b.HasIndex("VaccineId");

                    b.ToTable("order_vaccine", (string)null);
                });

            modelBuilder.Entity("PackageVaccine", b =>
                {
                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uuid");

                    b.HasKey("PackageId", "VaccineId")
                        .HasName("package_vaccine_pkey");

                    b.HasIndex("VaccineId");

                    b.ToTable("package_vaccine", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Batch", b =>
                {
                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("production_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_id");

                    b.HasKey("BatchId")
                        .HasName("batch_pkey");

                    b.HasIndex("VaccineId");

                    b.ToTable("batch", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Child", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_id");

                    b.Property<string>("AllergiesNotes")
                        .HasColumnType("text")
                        .HasColumnName("allergies_notes");

                    b.Property<string>("BloodType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("blood_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ChildId")
                        .HasName("children_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("children", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uuid")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("feedback_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Holiday", b =>
                {
                    b.Property<Guid>("HolidayId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("HolidayId")
                        .HasName("holidays_pkey");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("holidays", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("ManufacturerId")
                        .HasName("manufacturers_pkey");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("notifications_pkey");

                    b.HasIndex("ChildId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("ApprovedStaff")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_staff");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_date");

                    b.Property<bool?>("PackageModified")
                        .HasColumnType("boolean")
                        .HasColumnName("package_modified");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("ApprovedStaff");

                    b.HasIndex("ChildId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("discount");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer");

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("package_name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("PackageId")
                        .HasName("packages_pkey");

                    b.ToTable("packages", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("payments_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "OrderId" }, "payments_order_id_key")
                        .IsUnique();

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("RoleId")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_date");

                    b.Property<Guid?>("AdministeredBy")
                        .HasColumnType("uuid")
                        .HasColumnName("administered_by");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool?>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("schedule_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("VaccineType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("vaccine_type");

                    b.HasKey("ScheduleId")
                        .HasName("schedule_pkey");

                    b.HasIndex("AdministeredBy");

                    b.HasIndex("ChildId");

                    b.HasIndex("OrderId");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("BloodType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("blood_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("StaffId")
                        .HasName("staff_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject");

                    b.Property<string>("Temaplate")
                        .HasColumnType("text")
                        .HasColumnName("temaplate");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("TemplateId")
                        .HasName("template_pkey");

                    b.ToTable("template", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email_verification_token");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("TokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiry");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.UserCart", b =>
                {
                    b.Property<Guid>("ChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_id");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_id");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.HasKey("ChildId", "VaccineId", "PackageId")
                        .HasName("user_cart_pkey");

                    b.HasIndex("PackageId");

                    b.HasIndex("VaccineId");

                    b.ToTable("user_cart", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Vaccine", b =>
                {
                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<int?>("MinAge")
                        .HasColumnType("integer")
                        .HasColumnName("min_age");

                    b.Property<int?>("NumberDose")
                        .HasColumnType("integer")
                        .HasColumnName("number_dose");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("VaccineId")
                        .HasName("vaccine_pkey");

                    b.ToTable("vaccine", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.VaccineManufacture", b =>
                {
                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacturer_id");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uuid")
                        .HasColumnName("vaccine_id");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("ManufacturerId", "VaccineId")
                        .HasName("vaccine_manufactures_pkey");

                    b.HasIndex(new[] { "VaccineId" }, "vaccine_manufactures_vaccine_id_key")
                        .IsUnique();

                    b.ToTable("vaccine_manufactures", (string)null);
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.VaccineReaction", b =>
                {
                    b.Property<Guid>("ReactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("reaction_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("OnsetTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("onset_time");

                    b.Property<string>("ReactionDescription")
                        .HasColumnType("text")
                        .HasColumnName("reaction_description");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("resolved_time");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("severity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("ReactionId")
                        .HasName("vaccine_reactions_pkey");

                    b.HasIndex("ScheduleId");

                    b.ToTable("vaccine_reactions", (string)null);
                });

            modelBuilder.Entity("OrderPackage", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_package_order_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_package_package_id_fkey");
                });

            modelBuilder.Entity("OrderVaccine", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_vaccine_order_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.VaccineManufacture", null)
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .HasPrincipalKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_vaccine_vaccine_id_fkey");
                });

            modelBuilder.Entity("PackageVaccine", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VaccineChildren.Domain.Entities.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Batch", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.VaccineManufacture", "Vaccine")
                        .WithMany("Batches")
                        .HasForeignKey("VaccineId")
                        .HasPrincipalKey("VaccineId")
                        .HasConstraintName("batch_vaccine_id_fkey");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Child", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.User", "User")
                        .WithMany("Children")
                        .HasForeignKey("UserId")
                        .HasConstraintName("children_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("feedback_order_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("feedback_user_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Staff", "ModifiedByNavigation")
                        .WithMany("Holidays")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("holidays_modified_by_fkey");

                    b.Navigation("ModifiedByNavigation");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Notification", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Child", "Child")
                        .WithMany("Notifications")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("notifications_child_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Template", "Template")
                        .WithMany("Notifications")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("notifications_template_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("notifications_user_id_fkey");

                    b.Navigation("Child");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Order", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Staff", "ApprovedStaffNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ApprovedStaff")
                        .HasConstraintName("orders_approved_staff_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Child", "Child")
                        .WithMany("Orders")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("orders_child_id_fkey");

                    b.Navigation("ApprovedStaffNavigation");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Payment", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("VaccineChildren.Domain.Entities.Payment", "OrderId")
                        .HasConstraintName("payments_order_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("payments_user_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Staff", "AdministeredByNavigation")
                        .WithMany("Schedules")
                        .HasForeignKey("AdministeredBy")
                        .HasConstraintName("schedule_administered_by_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Child", "Child")
                        .WithMany("Schedules")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("schedule_child_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Order", "Order")
                        .WithMany("Schedules")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("schedule_order_id_fkey");

                    b.Navigation("AdministeredByNavigation");

                    b.Navigation("Child");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Staff", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Role", null)
                        .WithMany("Staff")
                        .HasForeignKey("RoleId");

                    b.HasOne("VaccineChildren.Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("VaccineChildren.Domain.Entities.Staff", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.User", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.UserCart", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Child", "Child")
                        .WithMany("UserCarts")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_cart_child_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Package", "Package")
                        .WithMany("UserCarts")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_cart_package_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Vaccine", "Vaccine")
                        .WithMany("UserCarts")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_cart_vaccine_id_fkey");

                    b.Navigation("Child");

                    b.Navigation("Package");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.VaccineManufacture", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("VaccineManufactures")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccine_manufactures_manufacturer_id_fkey");

                    b.HasOne("VaccineChildren.Domain.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineManufactures")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vaccine_manufactures_vaccine_id_fkey");

                    b.Navigation("Manufacturer");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.VaccineReaction", b =>
                {
                    b.HasOne("VaccineChildren.Domain.Entities.Schedule", "Schedule")
                        .WithMany("VaccineReactions")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("vaccine_reactions_schedule_id_fkey");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Child", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Schedules");

                    b.Navigation("UserCarts");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("VaccineManufactures");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Payment");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Package", b =>
                {
                    b.Navigation("UserCarts");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Role", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("VaccineReactions");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Staff", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("Orders");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Template", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.User", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.Vaccine", b =>
                {
                    b.Navigation("UserCarts");

                    b.Navigation("VaccineManufactures");
                });

            modelBuilder.Entity("VaccineChildren.Domain.Entities.VaccineManufacture", b =>
                {
                    b.Navigation("Batches");
                });
#pragma warning restore 612, 618
        }
    }
}
